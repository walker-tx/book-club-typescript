/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddBookToUserLibrarySecurity = {
  bearerAuth: string;
  apiKeyAuth: string;
};

export type AddBookToUserLibraryRequestBody = {
  bookId: number;
};

export type AddBookToUserLibraryRequest = {
  userId: number;
  requestBody: AddBookToUserLibraryRequestBody;
};

/** @internal */
export const AddBookToUserLibrarySecurity$inboundSchema: z.ZodType<
  AddBookToUserLibrarySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BearerAuth: z.string(),
  ApiKeyAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    "BearerAuth": "bearerAuth",
    "ApiKeyAuth": "apiKeyAuth",
  });
});

/** @internal */
export type AddBookToUserLibrarySecurity$Outbound = {
  BearerAuth: string;
  ApiKeyAuth: string;
};

/** @internal */
export const AddBookToUserLibrarySecurity$outboundSchema: z.ZodType<
  AddBookToUserLibrarySecurity$Outbound,
  z.ZodTypeDef,
  AddBookToUserLibrarySecurity
> = z.object({
  bearerAuth: z.string(),
  apiKeyAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    bearerAuth: "BearerAuth",
    apiKeyAuth: "ApiKeyAuth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBookToUserLibrarySecurity$ {
  /** @deprecated use `AddBookToUserLibrarySecurity$inboundSchema` instead. */
  export const inboundSchema = AddBookToUserLibrarySecurity$inboundSchema;
  /** @deprecated use `AddBookToUserLibrarySecurity$outboundSchema` instead. */
  export const outboundSchema = AddBookToUserLibrarySecurity$outboundSchema;
  /** @deprecated use `AddBookToUserLibrarySecurity$Outbound` instead. */
  export type Outbound = AddBookToUserLibrarySecurity$Outbound;
}

export function addBookToUserLibrarySecurityToJSON(
  addBookToUserLibrarySecurity: AddBookToUserLibrarySecurity,
): string {
  return JSON.stringify(
    AddBookToUserLibrarySecurity$outboundSchema.parse(
      addBookToUserLibrarySecurity,
    ),
  );
}

export function addBookToUserLibrarySecurityFromJSON(
  jsonString: string,
): SafeParseResult<AddBookToUserLibrarySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBookToUserLibrarySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBookToUserLibrarySecurity' from JSON`,
  );
}

/** @internal */
export const AddBookToUserLibraryRequestBody$inboundSchema: z.ZodType<
  AddBookToUserLibraryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  bookId: z.number(),
});

/** @internal */
export type AddBookToUserLibraryRequestBody$Outbound = {
  bookId: number;
};

/** @internal */
export const AddBookToUserLibraryRequestBody$outboundSchema: z.ZodType<
  AddBookToUserLibraryRequestBody$Outbound,
  z.ZodTypeDef,
  AddBookToUserLibraryRequestBody
> = z.object({
  bookId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBookToUserLibraryRequestBody$ {
  /** @deprecated use `AddBookToUserLibraryRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddBookToUserLibraryRequestBody$inboundSchema;
  /** @deprecated use `AddBookToUserLibraryRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddBookToUserLibraryRequestBody$outboundSchema;
  /** @deprecated use `AddBookToUserLibraryRequestBody$Outbound` instead. */
  export type Outbound = AddBookToUserLibraryRequestBody$Outbound;
}

export function addBookToUserLibraryRequestBodyToJSON(
  addBookToUserLibraryRequestBody: AddBookToUserLibraryRequestBody,
): string {
  return JSON.stringify(
    AddBookToUserLibraryRequestBody$outboundSchema.parse(
      addBookToUserLibraryRequestBody,
    ),
  );
}

export function addBookToUserLibraryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddBookToUserLibraryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBookToUserLibraryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBookToUserLibraryRequestBody' from JSON`,
  );
}

/** @internal */
export const AddBookToUserLibraryRequest$inboundSchema: z.ZodType<
  AddBookToUserLibraryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.number(),
  RequestBody: z.lazy(() => AddBookToUserLibraryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddBookToUserLibraryRequest$Outbound = {
  userId: number;
  RequestBody: AddBookToUserLibraryRequestBody$Outbound;
};

/** @internal */
export const AddBookToUserLibraryRequest$outboundSchema: z.ZodType<
  AddBookToUserLibraryRequest$Outbound,
  z.ZodTypeDef,
  AddBookToUserLibraryRequest
> = z.object({
  userId: z.number(),
  requestBody: z.lazy(() => AddBookToUserLibraryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddBookToUserLibraryRequest$ {
  /** @deprecated use `AddBookToUserLibraryRequest$inboundSchema` instead. */
  export const inboundSchema = AddBookToUserLibraryRequest$inboundSchema;
  /** @deprecated use `AddBookToUserLibraryRequest$outboundSchema` instead. */
  export const outboundSchema = AddBookToUserLibraryRequest$outboundSchema;
  /** @deprecated use `AddBookToUserLibraryRequest$Outbound` instead. */
  export type Outbound = AddBookToUserLibraryRequest$Outbound;
}

export function addBookToUserLibraryRequestToJSON(
  addBookToUserLibraryRequest: AddBookToUserLibraryRequest,
): string {
  return JSON.stringify(
    AddBookToUserLibraryRequest$outboundSchema.parse(
      addBookToUserLibraryRequest,
    ),
  );
}

export function addBookToUserLibraryRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddBookToUserLibraryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddBookToUserLibraryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddBookToUserLibraryRequest' from JSON`,
  );
}
