/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserSecurity = {
  bearerAuth: string;
  apiKeyAuth: string;
};

export type GetUserRequest = {
  id: number;
};

/** @internal */
export const GetUserSecurity$inboundSchema: z.ZodType<
  GetUserSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  BearerAuth: z.string(),
  ApiKeyAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    "BearerAuth": "bearerAuth",
    "ApiKeyAuth": "apiKeyAuth",
  });
});

/** @internal */
export type GetUserSecurity$Outbound = {
  BearerAuth: string;
  ApiKeyAuth: string;
};

/** @internal */
export const GetUserSecurity$outboundSchema: z.ZodType<
  GetUserSecurity$Outbound,
  z.ZodTypeDef,
  GetUserSecurity
> = z.object({
  bearerAuth: z.string(),
  apiKeyAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    bearerAuth: "BearerAuth",
    apiKeyAuth: "ApiKeyAuth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserSecurity$ {
  /** @deprecated use `GetUserSecurity$inboundSchema` instead. */
  export const inboundSchema = GetUserSecurity$inboundSchema;
  /** @deprecated use `GetUserSecurity$outboundSchema` instead. */
  export const outboundSchema = GetUserSecurity$outboundSchema;
  /** @deprecated use `GetUserSecurity$Outbound` instead. */
  export type Outbound = GetUserSecurity$Outbound;
}

export function getUserSecurityToJSON(
  getUserSecurity: GetUserSecurity,
): string {
  return JSON.stringify(GetUserSecurity$outboundSchema.parse(getUserSecurity));
}

export function getUserSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetUserSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserSecurity' from JSON`,
  );
}

/** @internal */
export const GetUserRequest$inboundSchema: z.ZodType<
  GetUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
});

/** @internal */
export type GetUserRequest$Outbound = {
  id: number;
};

/** @internal */
export const GetUserRequest$outboundSchema: z.ZodType<
  GetUserRequest$Outbound,
  z.ZodTypeDef,
  GetUserRequest
> = z.object({
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRequest$ {
  /** @deprecated use `GetUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserRequest$inboundSchema;
  /** @deprecated use `GetUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserRequest$outboundSchema;
  /** @deprecated use `GetUserRequest$Outbound` instead. */
  export type Outbound = GetUserRequest$Outbound;
}

export function getUserRequestToJSON(getUserRequest: GetUserRequest): string {
  return JSON.stringify(GetUserRequest$outboundSchema.parse(getUserRequest));
}

export function getUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserRequest' from JSON`,
  );
}
