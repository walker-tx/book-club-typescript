/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SignupRequestBody = {
  username: string;
  email: string;
  password: string;
};

/** @internal */
export const SignupRequestBody$inboundSchema: z.ZodType<
  SignupRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type SignupRequestBody$Outbound = {
  username: string;
  email: string;
  password: string;
};

/** @internal */
export const SignupRequestBody$outboundSchema: z.ZodType<
  SignupRequestBody$Outbound,
  z.ZodTypeDef,
  SignupRequestBody
> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignupRequestBody$ {
  /** @deprecated use `SignupRequestBody$inboundSchema` instead. */
  export const inboundSchema = SignupRequestBody$inboundSchema;
  /** @deprecated use `SignupRequestBody$outboundSchema` instead. */
  export const outboundSchema = SignupRequestBody$outboundSchema;
  /** @deprecated use `SignupRequestBody$Outbound` instead. */
  export type Outbound = SignupRequestBody$Outbound;
}

export function signupRequestBodyToJSON(
  signupRequestBody: SignupRequestBody,
): string {
  return JSON.stringify(
    SignupRequestBody$outboundSchema.parse(signupRequestBody),
  );
}

export function signupRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SignupRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignupRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignupRequestBody' from JSON`,
  );
}
