/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Book,
  Book$inboundSchema,
  Book$Outbound,
  Book$outboundSchema,
} from "./book.js";

export type PaginatedBookResponse = {
  next: string | null;
  previous: string | null;
  results: Array<Book>;
};

/** @internal */
export const PaginatedBookResponse$inboundSchema: z.ZodType<
  PaginatedBookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.nullable(z.string()),
  previous: z.nullable(z.string()),
  results: z.array(Book$inboundSchema),
});

/** @internal */
export type PaginatedBookResponse$Outbound = {
  next: string | null;
  previous: string | null;
  results: Array<Book$Outbound>;
};

/** @internal */
export const PaginatedBookResponse$outboundSchema: z.ZodType<
  PaginatedBookResponse$Outbound,
  z.ZodTypeDef,
  PaginatedBookResponse
> = z.object({
  next: z.nullable(z.string()),
  previous: z.nullable(z.string()),
  results: z.array(Book$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedBookResponse$ {
  /** @deprecated use `PaginatedBookResponse$inboundSchema` instead. */
  export const inboundSchema = PaginatedBookResponse$inboundSchema;
  /** @deprecated use `PaginatedBookResponse$outboundSchema` instead. */
  export const outboundSchema = PaginatedBookResponse$outboundSchema;
  /** @deprecated use `PaginatedBookResponse$Outbound` instead. */
  export type Outbound = PaginatedBookResponse$Outbound;
}

export function paginatedBookResponseToJSON(
  paginatedBookResponse: PaginatedBookResponse,
): string {
  return JSON.stringify(
    PaginatedBookResponse$outboundSchema.parse(paginatedBookResponse),
  );
}

export function paginatedBookResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedBookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedBookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedBookResponse' from JSON`,
  );
}
