/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Book = {
  id: number;
  title: string;
  author: string;
  isbn10: string;
};

/** @internal */
export const Book$inboundSchema: z.ZodType<Book, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number(),
    title: z.string(),
    author: z.string(),
    isbn10: z.string(),
  });

/** @internal */
export type Book$Outbound = {
  id: number;
  title: string;
  author: string;
  isbn10: string;
};

/** @internal */
export const Book$outboundSchema: z.ZodType<Book$Outbound, z.ZodTypeDef, Book> =
  z.object({
    id: z.number(),
    title: z.string(),
    author: z.string(),
    isbn10: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Book$ {
  /** @deprecated use `Book$inboundSchema` instead. */
  export const inboundSchema = Book$inboundSchema;
  /** @deprecated use `Book$outboundSchema` instead. */
  export const outboundSchema = Book$outboundSchema;
  /** @deprecated use `Book$Outbound` instead. */
  export type Outbound = Book$Outbound;
}

export function bookToJSON(book: Book): string {
  return JSON.stringify(Book$outboundSchema.parse(book));
}

export function bookFromJSON(
  jsonString: string,
): SafeParseResult<Book, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Book$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Book' from JSON`,
  );
}
